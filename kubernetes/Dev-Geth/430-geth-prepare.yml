apiVersion: v1
kind: Service
metadata:
  # hangileri statefulsetler ile eslestrilmekte kullaniliyor ?
  name: geth
  namespace: geth
  labels:
    app: geth
spec:
  ports:
  - port: 8545
    name: node1
  - port: 8546
    name: node2
  - port: 8547
    name: node3
  clusterIP: 10.152.183.132

  selector:
    app: geth
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: geth
  namespace: geth
spec:
  serviceName: "geth"
  replicas: 1 # by default is 1
  selector:
    matchLabels:
      app: geth # has to match .spec.template.metadata.labels
  template:
    metadata:
      labels:
        app: geth # has to match .spec.selector.matchLabels
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: enode-creator #taşınacak
          image: ethereum/client-go:alltools-release-1.8
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh"]

          args: 
          - "-c"
          - "bootnode --genkey /root/.ethereum/$(node1)/bootnode.key"
          - "bootnode --genkey /root/.ethereum/$(node2)/bootnode.key"
          - "bootnode --genkey /root/.ethereum/$(node3)/bootnode.key"
          - "echo -n 'enode://$(bootnode --nodekey /root/.ethereum/$(node1)/bootnode.key --writeaddress)@10.152.183.132:30311,' > /root/.ethereum/enodelist.txt"
          - "echo -n 'enode://$(bootnode --nodekey /root/.ethereum/$(node2)/bootnode.key --writeaddress)@10.152.183.132:30312,' > /root/.ethereum/enodelist.txt"
          - "echo -n 'enode://$(bootnode --nodekey /root/.ethereum/$(node3)/bootnode.key --writeaddress)@10.152.183.132:30313' > /root/.ethereum/enodelist.txt"

          env:
          - name: ACCOUNT_SECRET
            valueFrom:
              secretKeyRef:
                name: geth-account-secret
                key: accountsecret
          - name: node1
            valueFrom:
              configMapKeyRef:
                name: eth-geth
                key: node1
          - name: node2
            valueFrom:
              configMapKeyRef:
                name: eth-geth
                key: node2
          - name: node3
            valueFrom:
              configMapKeyRef:
                name: eth-geth
                key: node3


          volumeMounts:
          - name: data2
            mountPath: /root/.ethereum
          - name: config-genesis
            mountPath: /root/.ethereum/genesis.json
            subPath: genesis.json     

       
      initContainers:
      
      - name: create-dirs
        image: ethereum/client-go:release-1.8
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]

        args: 
        - "-c"
        - "mkdir -p /root/.ethereum/$(node1)"
        - "mkdir -p /root/.ethereum/$(node2)"
        - "mkdir -p /root/.ethereum/$(node3)"

        env:
        - name: node1
          valueFrom:
            configMapKeyRef:
              name: eth-geth
              key: node1
        - name: node2
          valueFrom:
            configMapKeyRef:
              name: eth-geth
              key: node2
        - name: node3
          valueFrom:
            configMapKeyRef:
              name: eth-geth
              key: node3

        volumeMounts:
        - name: data2
          mountPath: /root/.ethereum
      
      - name: init-genesis-node1
        image: ethereum/client-go:release-1.8
        imagePullPolicy: IfNotPresent
        args: [
          "--datadir", "/root/.ethereum/$(node1)",
          "init", "/root/.ethereum/genesis.json"
          ]

        env:
        - name: node1
          valueFrom:
            configMapKeyRef:
              name: eth-geth
              key: node1

        volumeMounts:
        - name: data2
          mountPath: /root/.ethereum
        - name: config-genesis
          mountPath: /root/.ethereum/genesis.json
          subPath: genesis.json
        - name: config-genesis
          mountPath: /root/.ethereum/pswd/password.txt
          subPath: password.txt

      - name: init-genesis-node2
        image: ethereum/client-go:release-1.8
        imagePullPolicy: IfNotPresent
        args: [
          "--datadir", "/root/.ethereum/$(node2)",
          "init", "/root/.ethereum/genesis.json",
          ]

        env:
        - name: node2
          valueFrom:
            configMapKeyRef:
              name: eth-geth
              key: node2

        volumeMounts:
        - name: data2
          mountPath: /root/.ethereum
        - name: config-genesis
          mountPath: /root/.ethereum/genesis.json
          subPath: genesis.json
        - name: config-genesis
          mountPath: /root/.ethereum/pswd/password.txt
          subPath: password.txt

      - name: init-genesis-node3
        image: ethereum/client-go:release-1.8
        imagePullPolicy: IfNotPresent
        args: [
          "--datadir", "/root/.ethereum/$(node3)",
          "init", "/root/.ethereum/genesis.json"
          ]

        env:
        - name: node3
          valueFrom:
            configMapKeyRef:
              name: eth-geth
              key: node3

        volumeMounts:
        - name: data2
          mountPath: /root/.ethereum
        - name: config-genesis
          mountPath: /root/.ethereum/genesis.json
          subPath: genesis.json
        - name: config-genesis
          mountPath: /root/.ethereum/pswd/password.txt
          subPath: password.txt
    
      
      
      

      volumes: 
        - name: config
          hostPath:
            path: /root/.ethereum
        - name: config-genesis
          configMap:
            name: eth-geth
        - emptyDir: {}
          name: data
        - name: data2
          persistentVolumeClaim:
            claimName: 'geth-pv-claim-dev'

      

