/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "bulutzincir/ethereum-operator/pkg/apis/bulutzincir/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EthereumLister helps list Ethereums.
type EthereumLister interface {
	// List lists all Ethereums in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Ethereum, err error)
	// Ethereums returns an object that can list and get Ethereums.
	Ethereums(namespace string) EthereumNamespaceLister
	EthereumListerExpansion
}

// ethereumLister implements the EthereumLister interface.
type ethereumLister struct {
	indexer cache.Indexer
}

// NewEthereumLister returns a new EthereumLister.
func NewEthereumLister(indexer cache.Indexer) EthereumLister {
	return &ethereumLister{indexer: indexer}
}

// List lists all Ethereums in the indexer.
func (s *ethereumLister) List(selector labels.Selector) (ret []*v1alpha1.Ethereum, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ethereum))
	})
	return ret, err
}

// Ethereums returns an object that can list and get Ethereums.
func (s *ethereumLister) Ethereums(namespace string) EthereumNamespaceLister {
	return ethereumNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EthereumNamespaceLister helps list and get Ethereums.
type EthereumNamespaceLister interface {
	// List lists all Ethereums in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Ethereum, err error)
	// Get retrieves the Ethereum from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Ethereum, error)
	EthereumNamespaceListerExpansion
}

// ethereumNamespaceLister implements the EthereumNamespaceLister
// interface.
type ethereumNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Ethereums in the indexer for a given namespace.
func (s ethereumNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Ethereum, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Ethereum))
	})
	return ret, err
}

// Get retrieves the Ethereum from the indexer for a given namespace and name.
func (s ethereumNamespaceLister) Get(name string) (*v1alpha1.Ethereum, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ethereum"), name)
	}
	return obj.(*v1alpha1.Ethereum), nil
}
